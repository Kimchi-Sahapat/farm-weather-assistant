import streamlit as st
import pandas as pd
import xml.etree.ElementTree as ET
from datetime import datetime

# üåç Page Config
st.set_page_config(page_title="Farm Weather Assistant", page_icon="üåæ", layout="wide")

# üåê Language Selector
lang = st.sidebar.radio("üåê Language / ‡∏†‡∏≤‡∏©‡∏≤", ("English", "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"))

# üìù Texts
TEXTS = {
    "English": {
        "upload_title": "Upload your weather station file (.csv or .xls)",
        "select_crop": "Select Your Crop",
        "weather_summary": "Today's Farm Weather Summary",
        "reference_title": "Reference Values",
        "rainfall_today": "Rainfall Today",
        "avg_temp_today": "Avg Temp Today",
        "min_humidity_today": "Min Humidity Today",
    },
    "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢": {
        "upload_title": "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (.csv ‡∏´‡∏£‡∏∑‡∏≠ .xls)",
        "select_crop": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä",
        "weather_summary": "‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        "reference_title": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á",
        "rainfall_today": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ù‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        "avg_temp_today": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        "min_humidity_today": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    }
}

# üå± Crop Base Temps
CROP_BASE_TEMPS = {
    "‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (Durian)": 15,
    "‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î (Maize)": 10,
    "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á (Mango)": 13,
    "‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á (Cassava)": 8,
    "‡∏Ç‡πâ‡∏≤‡∏ß (Rice)": 8,
    "‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà (Lychee)": 7
}

# üêõ Pest Database
PEST_DATABASE = {
    "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÑ‡∏ü (Thrips)": {
        "Topt_min": 28,
        "Topt_max": 32,
        "advice_en": "Thrips thrive in dry, hot conditions. Inspect young shoots closely.",
        "advice_th": "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÑ‡∏ü‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏´‡∏ô‡∏±‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡πâ‡∏á ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏≠‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
    },
    "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÅ‡∏õ‡πâ‡∏á (Mealybug)": {
        "Topt_min": 25,
        "Topt_max": 30,
        "advice_en": "Mealybugs prefer stable, humid conditions. Monitor closely during rainy periods.",
        "advice_th": "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÅ‡∏õ‡πâ‡∏á‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏§‡∏î‡∏π‡∏ù‡∏ô"
    },
    "‡πÑ‡∏£‡πÅ‡∏î‡∏á (Spider Mite)": {
        "Topt_min": 30,
        "Topt_max": 32,
        "advice_en": "Spider mites outbreak during hot and dry weather. Increase field scouting.",
        "advice_th": "‡πÑ‡∏£‡πÅ‡∏î‡∏á‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡πâ‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏õ‡∏•‡∏á"
    },
    "‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ (Fruit Borer)": {
        "Topt_min": 28,
        "Topt_max": 30,
        "advice_en": "Fruit borers lay eggs on developing fruits. Bag fruits early.",
        "advice_th": "‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏Ç‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏≠‡πà‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏´‡πà‡∏≠‡∏ú‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏¥‡πà‡∏ô‡πÜ"
    }
}

# üì• Upload Weather File
st.title("üåæ Farm Weather Assistant")

uploaded_file = st.file_uploader(TEXTS[lang]["upload_title"], type=["csv", "xls"])

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file, parse_dates=["Date/Time"])
    except Exception:
        uploaded_file.seek(0)
        try:
            file_bytes = uploaded_file.read()
            if b"<?xml" in file_bytes[:10]:
                root = ET.fromstring(file_bytes)
                namespace = {'ss': 'urn:schemas-microsoft-com:office:spreadsheet'}
                table = root.find(".//ss:Table", namespace)
                rows = table.findall(".//ss:Row", namespace)
                data = []
                for row in rows:
                    data.append([
                        cell.find(".//ss:Data", namespace).text if cell.find(".//ss:Data", namespace) is not None else None
                        for cell in row.findall(".//ss:Cell", namespace)
                    ])
                headers = [h if h else d for h, d in zip(data[0], data[1])]
                df = pd.DataFrame(data[2:], columns=headers)
                df.rename(columns={df.columns[0]: "Date/Time"}, inplace=True)
                df["Date/Time"] = pd.to_datetime(df["Date/Time"], errors="coerce")
                for col in df.columns[1:]:
                    df[col] = pd.to_numeric(df[col], errors="coerce")
            else:
                uploaded_file.seek(0)
                df = pd.read_excel(uploaded_file, engine="openpyxl")
                df["Date/Time"] = pd.to_datetime(df["Date/Time"], errors="coerce")
        except Exception as e:
            st.error(f"‚ùå Error loading file: {e}")
            df = None
else:
    df = None

# üå± If data loaded
if df is not None:
    st.success("‚úÖ File loaded successfully!")

    # üåæ Crop Selection
    st.subheader(f"üå± {TEXTS[lang]['select_crop']}")
    selected_crop = st.selectbox("", list(CROP_BASE_TEMPS.keys()))
    base_temp = CROP_BASE_TEMPS[selected_crop]

    # üå¶Ô∏è Today's Weather Summary
    st.subheader(f"üåû {TEXTS[lang]['weather_summary']}")
    today = datetime.now().date()
    today_df = df[df["Date/Time"].dt.date == today]

    if not today_df.empty:
        rainfall = today_df["Precipitation [mm] (avg)"].sum() if "Precipitation [mm] (avg)" in today_df.columns else None
        avg_temp = today_df["HC Air temperature [¬∞C] (avg)"].mean() if "HC Air temperature [¬∞C] (avg)" in today_df.columns else None
        min_humidity = today_df["HC Relative humidity [%] (min)"].min() if "HC Relative humidity [%] (min)" in today_df.columns else None

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(f"üåßÔ∏è {TEXTS[lang]['rainfall_today']}", f"{rainfall:.1f} mm" if rainfall else "N/A")
        with col2:
            st.metric(f"üå°Ô∏è {TEXTS[lang]['avg_temp_today']}", f"{avg_temp:.1f} ¬∞C" if avg_temp else "N/A")
        with col3:
            st.metric(f"üíß {TEXTS[lang]['min_humidity_today']}", f"{min_humidity:.1f} %" if min_humidity else "N/A")

    else:
        st.info("‚ÑπÔ∏è No data for today.")

# üìñ Reference Section
st.divider()
st.subheader(f"üìñ {TEXTS[lang]['reference_title']}")

st.markdown("### üåæ Crop Base Temperatures")
crop_df = pd.DataFrame([
    {"Crop": crop, "Base Temp (¬∞C)": temp} for crop, temp in CROP_BASE_TEMPS.items()
])
st.dataframe(crop_df)

st.markdown("### üêõ Pest Database")
pest_df = pd.DataFrame([
    {
        "Pest": pest,
        "Topt_min (¬∞C)": data["Topt_min"],
        "Topt_max (¬∞C)": data["Topt_max"],
        "Advice (EN)": data["advice_en"],
        "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (TH)": data["advice_th"],
    }
    for pest, data in PEST_DATABASE.items()
])
st.dataframe(pest_df)

# üåæ Footer
st.divider()
st.caption("üåæ Powered by Farm Weather Assistant")
